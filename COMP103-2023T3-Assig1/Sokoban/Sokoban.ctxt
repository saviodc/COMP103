#BlueJ class context
comment0.target=Sokoban
comment0.text=\ \n\ Sokoban\n
comment1.params=
comment1.target=Sokoban()
comment1.text=\n\ \ Constructor\:\ load\ the\ 0th\ level.\n
comment10.params=pos
comment10.target=void\ drawCell(Position)
comment10.text=\n\ Draw\ the\ cell\ at\ a\ given\ position\n
comment11.params=row\ col
comment11.target=void\ drawCell(int,\ int)
comment11.text=\n\ Draw\ the\ cell\ at\ a\ given\ row,col\n
comment12.params=
comment12.target=void\ drawWorker()
comment12.text=\n\ Draw\ the\ worker\ at\ its\ current\ position.\n
comment13.params=
comment13.target=void\ doLoad()
comment13.text=\n\ Load\ a\ grid\ of\ cells\ (and\ Worker\ position)\ for\ the\ current\ level\ from\ a\ file\n
comment14.params=
comment14.target=void\ setupGUI()
comment14.text=\n\ Add\ the\ buttons\ and\ set\ the\ key\ listener.\n
comment15.params=action\ x\ y
comment15.target=void\ doMouse(java.lang.String,\ double,\ double)
comment15.text=\n\ Mouse\ action\ handler\ for\ challenge\n\ This\ only\ works\ for\ moving\ up\ and\ down\ 'corridoors'\ and\ cannot\ avoid\ boxes\n\ Also\ have\ not\ guarded\ against\ clicking\ out\ of\ the\ map\ so\ that\ only\ is\ a\ problem\ for\ challenge\ works\ fine\ if\ all\ is\ normal\n
comment16.params=row\ col
comment16.target=boolean\ traverseCol(int,\ int)
comment16.text=\n\ Attempt\ at\ recursive\ check\ of\ simple\ traversal\ with\ no\ obstacles\ in\ between\ on\ the\ same\ column\n\ hence\ the\ name\ traverse\ column\n\ Return\ boolean\ of\ if\ it\ is\ possible\ to\ move\ down\ the\ column\n\ Just\ learning\ recursion\ so\ feedback\ on\ this\ would\ be\ much\ appreciated\ please\n
comment17.params=row\ col
comment17.target=boolean\ traverseRow(int,\ int)
comment17.text=\n\ Same\ as\ traverseCol,\ an\ attempt\ to\ solve\ this\ problem\ recursively\ just\ trying\ to\ see\ if\ there\ is\ a\ free\ path\ down\ the\ row\n\ Returns\ boolean\ of\ if\ it\ is\ possible\ to\ move\ down\ the\ column\n
comment18.params=x
comment18.target=int\ getCol(double)
comment18.text=\n\ Gets\ thecolumn\ of\ the\ click\ from\ x\ calculation\n\ does\ not\ guard\ for\ clicking\ too\ far\ down\ off\ the\ map\ \n
comment19.params=y
comment19.target=int\ getRow(double)
comment19.text=\n\ Gets\ the\ row\ of\ the\ click\ on\ the\ map\ from\ y\ calculation\n\ does\ not\ guard\ from\ clicking\ too\ far\ right\ off\ the\ map\n
comment2.params=direction
comment2.target=void\ moveOrPush(java.lang.String)
comment2.text=\ \n\ \ Moves\ the\ worker\ in\ the\ given\ direction,\ if\ possible.\n\ \ If\ there\ is\ box\ in\ front\ of\ the\ Worker\ and\ a\ space\ in\ front\ of\ the\ box,\n\ \ then\ push\ the\ box.\n\ \ Otherwise,\ if\ the\ worker\ can't\ move,\ do\ nothing.\n
comment20.params=
comment20.target=void\ redo()
comment20.text=\n\ Redo\ button\ that\ pops\ the\ last\ undone\ move,\ adds\ to\ history\ and\ appropriately\ does\ a\ redo\ of\ a\ move\ that\ was\ undone\n
comment21.params=
comment21.target=void\ undo()
comment21.text=\n\ Undo\ button\ that\ pops\ the\ top\ action\ of\ the\ stack\ and\ appropriately\ does\ undo\n
comment22.params=key
comment22.target=void\ doKey(java.lang.String)
comment22.text=\n\ Respond\ to\ key\ actions\n
comment23.params=args
comment23.target=void\ main(java.lang.String[])
comment3.params=direction
comment3.target=void\ move(java.lang.String)
comment3.text=\n\ Moves\ the\ worker\ into\ the\ new\ position\ (guaranteed\ to\ be\ empty)\ \n\ @param\ direction\ the\ direction\ the\ worker\ is\ heading\n
comment4.params=direction
comment4.target=void\ push(java.lang.String)
comment4.text=\n\ Push\:\ Moves\ the\ Worker,\ pushing\ the\ box\ one\ step\ \n\ \ @param\ direction\ the\ direction\ the\ worker\ is\ heading\n
comment5.params=direction
comment5.target=void\ pull(java.lang.String)
comment5.text=\n\ Pull\:\ (could\ be\ useful\ for\ undoing\ a\ push)\n\ \ move\ the\ Worker\ in\ the\ direction,\n\ \ pull\ the\ box\ into\ the\ Worker's\ old\ position\n
comment6.params=
comment6.target=void\ reportWin()
comment6.text=\n\ Report\ a\ win\ by\ flickering\ the\ cells\ with\ boxes\n
comment7.params=
comment7.target=boolean\ isSolved()
comment7.text=\n\ \ Returns\ true\ if\ the\ warehouse\ is\ solved,\ \n\ \ i.e.,\ all\ the\ shelves\ have\ boxes\ on\ them\ \n
comment8.params=direction
comment8.target=java.lang.String\ opposite(java.lang.String)
comment8.text=\n\ Returns\ the\ direction\ that\ is\ opposite\ of\ the\ parameter\n\ useful\ for\ undoing\!\n
comment9.params=
comment9.target=void\ drawWarehouse()
comment9.text=\n\ Draw\ the\ grid\ of\ cells\ on\ the\ screen,\ and\ the\ Worker\ \n
numComments=24
