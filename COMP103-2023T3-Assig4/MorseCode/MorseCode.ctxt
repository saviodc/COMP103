#BlueJ class context
comment0.target=MorseCode
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ Setup\ the\ GUI\ and\ creates\ the\ morse\ code\ with\ characters\ up\ to\ 2\ symbols\n
comment10.params=
comment10.target=void\ loadFile()
comment10.text=\ \n\ Load\ a\ collection\ of\ symbols\ and\ their\ codes\ from\ a\ file\n\ Each\ line\ contains\ the\ symbol\ and\ the\ corresponding\ morse\ code.\n
comment11.params=
comment11.target=void\ drawTree()
comment11.text=\n\ Tries\ to\ draw\ Tree\ by\ calling\ recursive\ method\n
comment12.params=n\ dotChild\ depth\ totalDepth\ x\ y\ width\ height
comment12.target=void\ drawTree(SymbolNode,\ boolean,\ int,\ int,\ double,\ double,\ double,\ double)
comment12.text=\n\ Tries\ to\ draw\ tree\ recursively\n
comment13.params=
comment13.target=void\ printDepth()
comment14.params=n\ depth
comment14.target=int\ getDepth(SymbolNode,\ int)
comment14.text=\n\ Helper\ method\ that\ gets\ how\ many\ nodes\ deep\ for\ challenge\ tree\ drawing\n
comment15.params=code
comment15.target=boolean\ isValidCode(java.lang.String)
comment15.text=\n\ Checks\ whether\ the\ code\ is\ a\ sequence\ of\ .\ and\ -\ only.\n
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\n\ Set\ up\ the\ interface\n
comment3.params=phrase
comment3.target=void\ encode(java.lang.String)
comment3.text=\n\ Challenge\ Method\ -\ This\ enacts\ the\ helper\ recursive\ method\ to\ find\ and\ match\ the\ code\ to\ the\ input\n\ If\ not\ found\ prints\ not\ found\n
comment4.params=soFar\ n\ target
comment4.target=java.lang.String\ encode(java.lang.String,\ SymbolNode,\ java.lang.String)
comment4.text=\n\ Challenge\ Method\ -\ Traverse\ the\ tree\ appropriately\ and\ return\ the\ string\ value\ if\ found\ else\ returns\ null\n
comment5.params=code
comment5.target=void\ decode(java.lang.String)
comment5.text=\n\ Decode\ a\ code\ by\ starting\ at\ the\ top\ (root),\ and\ working\n\ down\ the\ tree\ following\ the\ dot\ or\ dash\ nodes\ according\ to\ the\n\ code\n
comment6.params=
comment6.target=void\ printTree()
comment6.text=\ \ \n\ Print\ out\ the\ contents\ of\ the\ decision\ tree\ in\ the\ text\ pane.\n\ The\ root\ node\ should\ be\ at\ the\ top,\ followed\ by\ its\ "dot"\ subtree,\ and\ then\n\ its\ "dash"\ subtree.\n\ Each\ node\ should\ be\ indented\ by\ how\ deep\ it\ is\ in\ the\ tree.\n\ Needs\ a\ recursive\ "helper\ method"\ which\ is\ passed\ a\ node\ and\ an\ indentation\ string.\n\ \ (The\ indentation\ string\ will\ be\ a\ string\ of\ space\ characters\ plus\ the\ morse\ code\ leading\n\ \ to\ the\ node)\n
comment7.params=node\ depth\ code
comment7.target=void\ printTree(SymbolNode,\ int,\ java.lang.String)
comment7.text=\n\ Recursive\ method\ that\ carries\ the\ code\ representation\ and\ the\ indentation\ appropriate\ to\ depth\ to\ traverse\ and\ print\ the\ values\ of\ the\ tree\n
comment8.params=code
comment8.target=void\ addCodeCore(java.lang.String)
comment8.text=\n\ Add\ a\ new\ code\ to\ the\ tree\ (as\ long\ as\ it\ will\ be\ in\ a\ node\ just\ below\ an\ existing\ node).\n\ Follows\ the\ code\ down\ the\ tree\ (like\ decode)\n\ If\ it\ finds\ a\ node\ for\ the\ code,\ then\ it\ reports\ the\ current\ symbol\ for\ that\ code\n\ If\ it\ it\ gets\ to\ a\ node\ where\ there\ is\ no\ child\ for\ the\ next\ .\ or\ -\ in\ the\ code\ then\n\ \ If\ this\ is\ the\ last\ .\ or\ -\ in\ the\ code,\ it\ asks\ for\ a\ new\ symbol\ and\ adds\ a\ new\ node\n\ \ If\ there\ is\ more\ than\ one\ .\ or\ -\ left\ in\ the\ code,\ it\ gives\ up\ and\ says\ it\ can't\ add\ it.\n\ For\ example,\n\ \ If\ it\ is\ adding\ the\ code\ (.-.)\ and\ the\ tree\ has\ "A"\ (.-)\ but\ doesn't\ have\ (.-.),\n\ \ \ then\ it\ should\ ask\ for\ the\ symbol\ (R)\ add\ a\ child\ node\ with\ R\n\ \ If\ it\ is\ adding\ the\ code\ (.-..)\ and\ the\ tree\ has\ "A"\ (.-)\ but\ doesn't\ have\ (.-.),\n\ \ \ then\ it\ would\ not\ attempt\ to\ add\ a\ node\ for\ (.-..)\ (L)\ because\ that\ would\ require\n\ \ \ adding\ more\ than\ one\ node.\n
comment9.params=code
comment9.target=void\ addCodeCompl(java.lang.String)
comment9.text=\n\ Grow\ the\ tree\ by\ allowing\ the\ user\ to\ add\ any\ symbol,\ whether\ there\ is\ a\ path\ leading\ to\ it.\n\ Like\ addCodeCore,\ it\ starts\ at\ the\ top\ (root),\ and\ works\ its\ way\ down\ the\ tree\n\ \ following\ the\ dot\ or\ dash\ nodes\ according\ to\ the\ given\ sequence\ of\ the\ code.\n\ If\ an\ intermediate\ node\ does\ not\ exist,\ it\ needs\ to\ be\ created\ with\ a\ text\ set\ to\ null.\n
numComments=16
